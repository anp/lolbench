  # - &store_target_dir
  #   store_artifacts:
  #     path: ~/project/target

  # - &bench_crate
  #   <<: *rust_job
  #   environment:
  #     LOLBENCH_DATA_DIR: /tmp/lolbench
  #   steps:
  #     - checkout
  #     - *setup
  #     # - *restore_cache
  #     - *install_deps
  #     - run:
  #         name: test benchmark crate
  #         command: cargo test --release --manifest-path "./benches/$CIRCLE_JOB/Cargo.toml"
  #     - *save_cache
  #     - *store_target_dir
  #     - persist_to_workspace:
  #         root: /tmp/lolbench
  #         paths:
  #           # go's globbing library makes me sad, no ** for any-length path segments?
  #           # thankfully we only have two layers in storage atm
  #           - "*/*.json"

  #     - run:
  #         name: build website
  #         command: |
  #           pushd ..
  #           mkdir lolbench-site
  #           git clone https://github.com/anp/lolbench-data.git
  #           popd

  #           cargo build-website --data-dir ../lolbench-data --output-dir ~/lolbench-site
  #     - store_artifacts:
  #         path: ~/lolbench-site

  # screenshots:
  #   docker:
  #     - image: circleci/node:10
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ~/lolbench-site
  #     - run:
  #         name: install chromium
  #         command: |
  #           sudo apt-get update
  #           # https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md
  #           sudo apt-get install \
  #             gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 \
  #             libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 \
  #             libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 \
  #             libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 \
  #             libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates \
  #             fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
  #     - run:
  #         name: install script deps
  #         working_directory: tools
  #         command: npm ci
  #     - run:
  #         name: take screenshots
  #         working_directory: tools
  #         command: npm run screenshots -- --siteDir ~/lolbench-site --outputDir ~/screenshots
  #     - store_artifacts:
  #         path: ~/screenshots

  # deploy:
  #   docker:
  #     - image: circleci/node:10
  #   steps:
  #     - checkout
  #     - *setup
  #     - run:
  #         name: install deployment deps
  #         command: |
  #           # https://docs.ansible.com/ansible/2.5/installation_guide/intro_installation.html
  #           echo 'deb http://ppa.launchpad.net/ansible/ansible/ubuntu trusty main' | \
  #             sudo tee -a /etc/apt/sources.list
  #           sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367
  #           sudo apt-get update
  #           sudo apt-get install ansible

  #     - run:
  #         name: setup deploy secrets
  #         command: |
  #           mkdir -p ~/.ssh
  #           echo "$LOLBENCH_DEPLOY_KEY" | base64 -d > ~/.ssh/id_ed25519
  #           chmod 0600 ~/.ssh/id_ed25519
  #           echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password

  #           # trust all ansible hosts
  #           mkdir -p ~/.ssh
  #           grep runner= deploy/hosts | cut -d' ' -f1 | xargs ssh-keyscan >> ~/.ssh/known_hosts

  #     - run: ./deploy.sh $CIRCLE_SHA1

  # rebalance:
  #   <<: *rust_job
  #   steps:
  #     - checkout
  #     - *setup
  #     # - *restore_cache
  #     - attach_workspace:
  #         at: /tmp/lolbench
  #     - *install_deps
  #     - run: cargo rebalance-benchmarks --sample-dir /tmp/lolbench
  #     - run: cd /tmp && tar -cvzf lolbench-data-dir.tar.gz lolbench
  #     - *save_cache
  #     - store_artifacts:
  #         path: registry.toml
  #     - store_artifacts:
  #         path: /tmp/lolbench
  #     - store_artifacts:
  #         path: /tmp/lolbench-data-dir.tar.gz

# workflows:
#   version: 2
#   main:
#     jobs:
#       - rebalance:
#           requires:
#             - brotli_1_1_3
#             - byteorder_1_2_6
#             - crossbeam_epoch_0_4_0
#             - csv_1_0_2
#             - diesel_1_1_1
#             - doom_9e197d7
#             - inflate_0_3_4
#             - json_benchmark_c7d3d9b
#             - nom_4_0_0
#             - quickcheck_0_6_1
#             - rayon_1_0_0
#             - raytrace_8de9020
#             - regex_0_2_6
#             - sha2_0_8_0
#             - sha3_0_8_0
#             - snap_0_2_4
#             - clap_2_31_2
#       - screenshots:
#           requires:
#             - core

# brotli_1_1_3
# byteorder_1_2_6
# inflate_0_3_4
# rayon_1_0_0
# crossbeam_epoch_0_4_0
# json_benchmark_c7d3d9b
# raytrace_8de9020
# diesel_1_1_1
# nom_4_0_0
# regex_0_2_6
# doom_9e197d7
# quickcheck_0_6_1
# sha2_0_8_0
# sha3_0_8_0
# snap_0_2_4
# csv_1_0_2
# clap_2_31_2

      # - deploy:
      #     filters:
      #       branches:
      #         only:
      #           - master
      #     requires:
      #       - fmt
      #       - core
      #       - rebalance
      #       - screenshots
